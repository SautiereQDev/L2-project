# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    # Base URL for the API (can be overridden via environment variables)
    app.base_url: '%env(default:app.base_url.default:APP_BASE_URL)%'
    app.base_url.default: 'https://project.localhost:8443'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            # Bind the specific Doctrine providers to the named arguments of all OutputProviders
            # These arguments match the constructor param names in AthleteOutputProvider and DisciplineOutputProvider
            $itemProvider: '@api_platform.doctrine.orm.state.item_provider'
            $collectionProvider: '@api_platform.doctrine.orm.state.collection_provider'
            # Bind base URL parameter for dynamic URL generation
            $baseUrl: '%app.base_url%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # Configuration explicite de l'Ã©couteur de pagination
    App\EventListener\PaginationHeaderListener:
        tags:
            - { name: 'kernel.event_subscriber' }

    # The `bind` configuration above is sufficient for injecting the correct providers.
    # Use the `provider` attribute on each ApiResource to specify the provider for a resource type.
    # Avoid direct service decoration to prevent conflicts or unintended behavior.

    # User password hasher processor
    App\State\UserPasswordHasher:
        bind:
            $processor: '@api_platform.doctrine.orm.state.persist_processor'

    # Custom denormalizer for Athlete DTOs
    App\Serializer\AthleteDtoDenormalizer:
        tags:
            - { name: 'serializer.normalizer', priority: 1000 }


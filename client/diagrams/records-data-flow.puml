@startuml Records Data Flow

' Définition des participants
title Diagramme de flux de données : Affichage des records d'athlétisme

' Définition des composants principaux
package "Backend" {
    [API Platform (Symfony)] as Backend
    [RecordOutput DTO] as RecordOutput
    [HydraSerializer] as HydraSerializer
}

package "Frontend" {
    [ApiService] as ApiService
    [RecordsService] as RecordsService
    [RecordsView.vue] as RecordsView
    [RecordsTable.vue] as RecordsTable
    [collection.s.ts] as CollectionUtils
}

' Définition des types de données
database "Types" {
    frame "Backend Types" {
        [RecordOutput] as BackendType
        [DisciplineOutput] as DisciplineType
        [AthleteOutput] as AthleteType
        [LocationOutput] as LocationType
    }
    
    frame "Frontend Types" {
        [RecordEntity] as FrontendType
        [DisciplineType (enum)] as DisciplineEnum
        [GenderType (enum)] as GenderEnum
        [CategorieType (enum)] as CategorieEnum
    }
}

' Flux de données
Backend --> HydraSerializer : Record entities
HydraSerializer --> RecordOutput : Serialization
RecordOutput --> ApiService : JSON Response\n(Hydra Format)

ApiService --> RecordsService : JSON data
RecordsService --> RecordsView : ApiCollection<RecordEntity>
RecordsView --> CollectionUtils : Checks data structure
CollectionUtils --> RecordsView : Confirms valid data
RecordsView --> RecordsView : Processes & sorts data
RecordsView --> RecordsTable : Passes sorted records

' Relations entre types
BackendType -> FrontendType : maps to
DisciplineType -> DisciplineEnum : maps to
AthleteType -> FrontendType : nested in

' Annotations
note left of ApiService
  Handles HTTP requests
  Manages authentication
  Error handling
end note

note right of RecordsService
  Fichier: src/services/records.service.ts
  - getRecords(filters: RecordFilters)
  - Converts API response to internal format
end note

note right of RecordsView
  Fichier: src/views/RecordsView.vue
  - Manages data fetching & state
  - Handles sorting & filtering
  - Uses computed sortedRecords
end note

note right of RecordsTable
  Fichier: src/components/records/RecordsTable.vue
  - PrimeVue DataTable component
  - Display & formatting
  - Column configuration
end note

note left of CollectionUtils
  Fichier: src/utils/collection.s.ts
  - hasMembers() function
  - Checks different data formats
end note

note bottom of Backend
  API Endpoints:
  - GET /api/records
  - Supports filtering, pagination, sorting
  - Returns Hydra format
end note

note bottom of FrontendType
  RecordEntity {
    id: number;
    discipline: { name: string, type: DisciplineType };
    athlete: { firstname: string, lastname: string, ... };
    performance: number;
    lastRecord: string;
    genre: GenderType;
    categorie: CategorieType;
    location: { name: string, city: string, country: string };
    isCurrentRecord: boolean;
  }
end note

@enduml
